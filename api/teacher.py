from fastapi import APIRouter, HTTPException, Query
from pydantic import BaseModel
from models.db import get_db_connection
from datetime import datetime
import pytz
import sqlite3
from openpyxl import Workbook
import io
from fastapi.responses import StreamingResponse

router = APIRouter()

# üìå ƒê·ªãnh nghƒ©a schema cho d·ªØ li·ªáu phi√™n ƒëi·ªÉm danh
class SessionCreate(BaseModel):
    class_id: str
    start_time: str  # d·∫°ng 'YYYY-MM-DDTHH:MM'
    end_time: str
    ontime_limit: int = 10

# üìå API: T·∫°o l·ªõp h·ªçc ph·∫ßn m·ªõi
@router.post("/create_class")
def create_class(class_id: str, class_name: str, teacher_id: str, class_key: str):
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        created_at = datetime.now(pytz.timezone("Asia/Ho_Chi_Minh")).strftime("%Y-%m-%d %H:%M:%S")
        cursor.execute("""
            INSERT INTO classes (class_id, class_name, teacher_id, class_key, created_at)
            VALUES (?, ?, ?, ?, ?)""",
            (class_id, class_name, teacher_id, class_key, created_at)
        )
        conn.commit()
        return {"success": True, "message": "‚úÖ L·ªõp h·ªçc ph·∫ßn ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!"}
    except sqlite3.IntegrityError:
        return {"success": False, "message": "‚ö† M√£ l·ªõp h·ªçc ph·∫ßn ƒë√£ t·ªìn t·∫°i!"}
    except Exception as e:
        return {"success": False, "message": f"L·ªói h·ªá th·ªëng: {str(e)}"}
    finally:
        conn.close()

# üìå API: Xo√° l·ªõp h·ªçc ph·∫ßn
@router.delete("/delete_class")
def delete_class(class_id: str):
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute("SELECT COUNT(*) FROM enrollments WHERE class_id = ?", (class_id,))
        if cursor.fetchone()[0] > 0:
            return {"success": False, "message": "‚ö† Kh√¥ng th·ªÉ xo√° l·ªõp c√≥ sinh vi√™n ƒë√£ ƒëƒÉng k√Ω!"}

        cursor.execute("DELETE FROM classes WHERE class_id = ?", (class_id,))
        conn.commit()
        return {"success": True, "message": "‚úÖ L·ªõp h·ªçc ph·∫ßn ƒë√£ ƒë∆∞·ª£c xo√°!"}
    except Exception as e:
        return {"success": False, "message": f"L·ªói h·ªá th·ªëng: {str(e)}"}
    finally:
        conn.close()

# üìå API: L·∫•y danh s√°ch l·ªõp h·ªçc ph·∫ßn c·ªßa gi·∫£ng vi√™n
@router.get("/get_classes_by_teacher")
def get_classes_by_teacher(teacher_id: str):
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute("""
            SELECT class_id, class_name, class_key, created_at FROM classes
            WHERE teacher_id = ?
            ORDER BY class_id ASC
        """, (teacher_id,))
        rows = cursor.fetchall()
        data = [dict(row) for row in rows]
        return {"success": True, "data": data}
    except Exception as e:
        return {"success": False, "message": f"L·ªói h·ªá th·ªëng: {str(e)}"}
    finally:
        conn.close()

# üìå API: C·∫≠p nh·∫≠t t√™n l·ªõp h·ªçc ph·∫ßn
class UpdateClassRequest(BaseModel):
    class_id: str
    class_name: str
    class_key: str

@router.post("/update_class")
def update_class(data: UpdateClassRequest):
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute("""
            UPDATE classes 
            SET class_name = ?, class_key = ?
            WHERE class_id = ?
        """, (data.class_name, data.class_key, data.class_id))
        
        if cursor.rowcount == 0:
            return {"success": False, "message": "‚ö† Kh√¥ng t√¨m th·∫•y l·ªõp ƒë·ªÉ c·∫≠p nh·∫≠t!"}
        
        conn.commit()
        return {"success": True, "message": "‚úÖ ƒê√£ c·∫≠p nh·∫≠t l·ªõp h·ªçc ph·∫ßn!"}
    except Exception as e:
        return {"success": False, "message": f"L·ªói h·ªá th·ªëng: {str(e)}"}
    finally:
        conn.close()

# üìå API: Xem sinh vi√™n c·ªßa l·ªõp
@router.get("/teacher/students")
def get_students_by_class(class_id: str):
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute("""
            SELECT u.user_id, u.name, u.email, u.phone_number
            FROM users u
            JOIN enrollments e ON u.user_id = e.user_id
            WHERE e.class_id = ?
        """, (class_id,))
        rows = cursor.fetchall()
        data = [dict(row) for row in rows]
        return {"success": True, "data": data}
    except Exception as e:
        return {"success": False, "message": str(e)}
    finally:
        conn.close()

# üìå API: Xo√° sinh vi√™n kh·ªèi l·ªõp
@router.delete("/remove_student_from_class")
def remove_student_from_class(class_id: str, user_id: str):
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute("DELETE FROM enrollments WHERE class_id = ? AND user_id = ?", (class_id, user_id))
        conn.commit()
        if cursor.rowcount == 0:
            raise HTTPException(status_code=404, detail="Kh√¥ng t√¨m th·∫•y sinh vi√™n trong l·ªõp.")
        return {"success": True, "message": f"‚úÖ ƒê√£ xo√° sinh vi√™n {user_id} kh·ªèi l·ªõp {class_id}."}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
    finally:
        conn.close()
        
# üìå API: T·∫°o phi√™n ƒëi·ªÉm danh m·ªõi cho l·ªõp h·ªçc ph·∫ßn (D√πng JSON body)
@router.post("/create_session")
def create_session(data: SessionCreate):
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        vn_tz = pytz.timezone("Asia/Ho_Chi_Minh")
        start_dt = vn_tz.localize(datetime.strptime(data.start_time, "%Y-%m-%dT%H:%M"))
        end_dt = vn_tz.localize(datetime.strptime(data.end_time, "%Y-%m-%dT%H:%M"))
        created_at = datetime.now(vn_tz).strftime("%Y-%m-%d %H:%M:%S")

        cursor.execute("""
            INSERT INTO sessions (class_id, start_time, end_time, created_at, ontime_limit)
            VALUES (?, ?, ?, ?, ?)
        """, (
            data.class_id,
            start_dt.strftime("%Y-%m-%d %H:%M:%S"),
            end_dt.strftime("%Y-%m-%d %H:%M:%S"),
            created_at,
            data.ontime_limit
        ))
        conn.commit()
        return {"success": True, "message": "‚úÖ Phi√™n ƒëi·ªÉm danh ƒë√£ ƒë∆∞·ª£c t·∫°o!"}
    except Exception as e:
        return {"success": False, "message": f"L·ªói h·ªá th·ªëng: {str(e)}"}
    finally:
        conn.close()

# üìå API: L·∫•y danh s√°ch phi√™n ƒëi·ªÉm danh theo class_id
@router.get("/get_sessions")
def get_sessions(class_id: str):
    conn = get_db_connection()
    cursor = conn.cursor()

    try:
        cursor.execute("""
            SELECT id, start_time, end_time, created_at, ontime_limit
            FROM sessions
            WHERE class_id = ?
            ORDER BY created_at ASC
        """, (class_id,))

        records = cursor.fetchall()

        if not records:
            return {"success": False, "message": "Kh√¥ng c√≥ phi√™n n√†o."}

        data = []
        for row in records:
            data.append({
                "session_id": row[0],
                "start_time": row[1],
                "end_time": row[2],
                "created_at": row[3],
                "ontime_limit": row[4]
            })

        return {"success": True, "data": data}

    except Exception as e:
        return {"success": False, "message": str(e)}
    finally:
        conn.close()

@router.get("/attendance_list_by_session")
def get_attendance_list_by_session(
    session_id: int = Query(..., description="Session ID b·∫Øt bu·ªôc"),
    class_id: str = Query(..., description="Class ID b·∫Øt bu·ªôc")
):
    if session_id is None or class_id is None or str(session_id) == "undefined" or class_id == "undefined":
        raise HTTPException(status_code=400, detail="Thi·∫øu ho·∫∑c sai session_id / class_id!")

    conn = get_db_connection()
    cursor = conn.cursor()

    try:
        cursor.execute("""
            SELECT u.user_id, u.name, a.status, a.created_at
            FROM users u
            LEFT JOIN attendance a ON u.user_id = a.user_id
            LEFT JOIN enrollments e ON u.user_id = e.user_id
            WHERE a.session_id = ? AND e.class_id = ?
            ORDER BY u.name ASC
        """, (session_id, class_id))

        records = cursor.fetchall()

        if not records:
            return {"success": False, "message": "‚ö† Kh√¥ng c√≥ d·ªØ li·ªáu ƒëi·ªÉm danh cho l·ªõp v√† phi√™n n√†y."}

        data = []
        for row in records:
            data.append({
                "user_id": row[0],
                "name": row[1],
                "status": row[2] if row[2] else "Ch∆∞a ƒëi·ªÉm danh",
                "created_at": row[3]
            })

        return {"success": True, "data": data}

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"L·ªói h·ªá th·ªëng: {str(e)}")

    finally:
        conn.close()

class EnrollRequest(BaseModel):
    class_id: str
    user_id: str

@router.post("/add_student_to_class")
def add_student_to_class(data: EnrollRequest):
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        # Ki·ªÉm tra l·ªõp h·ªçc t·ªìn t·∫°i
        cursor.execute("SELECT 1 FROM classes WHERE class_id = ?", (data.class_id,))
        if not cursor.fetchone():
            return {"success": False, "message": "‚ö†Ô∏è L·ªõp h·ªçc kh√¥ng t·ªìn t·∫°i!"}

        # Ki·ªÉm tra sinh vi√™n t·ªìn t·∫°i
        cursor.execute("SELECT 1 FROM users WHERE user_id = ? AND role = 'student'", (data.user_id,))
        if not cursor.fetchone():
            return {"success": False, "message": "‚ö†Ô∏è M√£ sinh vi√™n kh√¥ng h·ª£p l·ªá!"}

        # Ki·ªÉm tra ƒë√£ ƒëƒÉng k√Ω ch∆∞a
        cursor.execute("SELECT 1 FROM enrollments WHERE class_id = ? AND user_id = ?", (data.class_id, data.user_id))
        if cursor.fetchone():
            return {"success": False, "message": "‚ö†Ô∏è Sinh vi√™n ƒë√£ ƒëƒÉng k√Ω l·ªõp n√†y!"}

        # Th√™m v√†o enrollments
        cursor.execute("INSERT INTO enrollments (class_id, user_id) VALUES (?, ?)", (data.class_id, data.user_id))
        conn.commit()
        return {"success": True, "message": "‚úÖ ƒê√£ th√™m sinh vi√™n v√†o l·ªõp!"}

    except Exception as e:
        return {"success": False, "message": f"L·ªói h·ªá th·ªëng: {str(e)}"}
    finally:
        conn.close()
        
@router.get("/export_attendance_excel")
def export_attendance_excel(session_id: int, class_id: str):
    conn = get_db_connection()
    cursor = conn.cursor()

    try:
        cursor.execute("""
            SELECT u.user_id, u.name, a.status, a.created_at
            FROM users u
            LEFT JOIN attendance a ON u.user_id = a.user_id
            LEFT JOIN enrollments e ON u.user_id = e.user_id
            WHERE a.session_id = ? AND e.class_id = ?
            ORDER BY u.name ASC
        """, (session_id, class_id))
        records = cursor.fetchall()

        if not records:
            raise HTTPException(status_code=404, detail="Kh√¥ng c√≥ d·ªØ li·ªáu ƒëi·ªÉm danh")

        wb = Workbook()
        ws = wb.active
        ws.title = "Danh s√°ch ƒëi·ªÉm danh"

        # Header
        ws.append(["M√£ SV", "H·ªç t√™n", "Tr·∫°ng th√°i", "Th·ªùi gian"])

        # Data
        for row in records:
            ws.append([
                row[0],
                row[1],
                row[2] if row[2] else "Ch∆∞a ƒëi·ªÉm danh",
                row[3]
            ])

        output = io.BytesIO()
        wb.save(output)
        output.seek(0)
        headers = {"Content-Disposition": f"attachment; filename=attendance_{class_id}_session{session_id}.xlsx"}
        return StreamingResponse(output, media_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", headers=headers)

    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

    finally:
        conn.close()
